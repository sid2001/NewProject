<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Web App</title>
    <link rel="stylesheet" href="css/chat.css">
</head>
<body onload = "connectChat()">
    <header class="header">
        <form action="/logout" method="POST">
            <div  id="log_out"><button type="submit">Log-Out</button></div>

        </form>
            
                
            <div id="home"><a href="https://127.0.0.1:3000/login">Home</a></div>
            
            
    </header>
    <span id="menu-button" onclick="toggleMenu()">&#9776;</span>
    <div class="menu-closed">

        <!-- Side Menu -->
        <div id="side-menu" class="side-menu">
        </div>
        <!-- Content Area -->
        <!-- <div id="content"> -->
        <!-- </div> -->
        
    </div>
    
    <div class="chat-container">
        <div class="video-container">
            <!-- User's video -->
            <div class ="video" >
                <!-- Replace with actual video element or iframe -->
                <video id="remote_video" autoplay controls playsinline></video>
                <video id="local_video" autoplay controls playsinline></video>
            </div>
        </div>
        <div class="chat">
            <div class="chat-messages">
                <!-- Chat messages will be displayed here -->
                <div id="message" class="message">
                    <!-- <div class="message-sender">Sender</div>
                    <div class="message-text">Hello!</div> -->
                </div>
                <!-- Add more message divs as needed -->
            </div>
            <div class="message-input">
                <textarea id="message-input" name="message" placeholder="Type your message..."></textarea>
                <div id="actionButton">
                    <button id="video-call">Video Call</button>
                    <button id="send-button">Send</button>
                    <button id ="connect" onclick="connect()">Connect</button>
                    <button id="getPeers" onclick="getPeers()">Get Peers</button>
                    <button id="consume" onclick="consume()">Consume</button>
                </div>
                
            </div>
            
        </div>
    </div>
</div>

<script > 

var users = <%- JSON.stringify(users) %>;   
var username = <%- JSON.stringify(username) %>;
var vbtn = document.getElementById("video-call");
// vbtn.addEventListener("click",videoCall());

var consumers = new Map();
var peers = new Map();

var selectedContact="";
var contacts = document.getElementById("side-menu");
users.forEach((user)=>{
    if(user.username!==username){
  let contact = document.createElement('contact');
  contact.innerHTML = user.name;
  contact.setAttribute("style","background:white")
  contact.addEventListener("click",()=>{
      selectedContact = user.username;
      toggleMenu();
  })
  contact.setAttribute("username",user.username);
  contacts.appendChild(contact);
}
})
var toggleMenu = function (){
  var sideMenu = document.getElementById("side-menu");
//   var content = document.getElementById("content");
  var menuButton = document.getElementById("menu-button");
  var body = document.body
  if (sideMenu.style.width === "250px") {
      sideMenu.style.width = "0";
    //   content.style.marginLeft = "0";
      menuButton.style.marginLeft = "0";
      body.classList.remove("menu-open");
  } else {
      sideMenu.style.width = "250px";
    //   content.style.marginLeft = "250px";
      menuButton.style.marginLeft = "250px";
      body.classList.add("menu-open");
  }
}



let localStream = null;
const configuration = {
    'iceServers' :[{
        'urls': 'stun:stun.l.google.com:19302'
    }]
}
var pc;

async function connect(){

    pc = new RTCPeerConnection(configuration);

    navigator.mediaDevices.getUserMedia({
        audio:true,
        video:true
    }).then(stream =>{
        local_video.srcObject = stream;
        localStream = stream;

        for (let track of localStream.getTracks()) {
            pc.addTrack(track, localStream);
        }
        return true;
    })
    .then(async (d)=>{
        await pc.createOffer().then(async(offer)=>{
        var offer = offer;
        await pc.setLocalDescription(offer);
        pc.onicecandidate = event => {
            console.log("sending ice!!");

            if(event.candidate){
                ws.send(JSON.stringify({
                type:"ice",
                from:username,
                uid:pc._uid,
                to:selectedContact,
                ice:event.candidate
                }))
            }
        }
        const payload = {
        type:"connect",
        uid:pc._uid,
        username:username,
        sdp: offer
        }
        ws.send(JSON.stringify(payload));

    }).catch((err)=>{
        console.log("error while offer!!");
    })
    })
    .catch(err=>{ 
        console.log(err);
    })
    
}

async function getPeers() {
    const payload = {
        type:"getPeers",
        uid:pc._uid
    }
    ws.send(JSON.stringify(payload));
}
async function setPeers(p){
    p.forEach((peer)=>{
        if(peers.has(peer.id)===false)
        peers.set(peer.id,peer.username);
    })
}

async function consume(){

    const id = "342sger";
    let cpc = new RTCPeerConnection(configuration);
    consumers.set(id,{cpc:cpc});
    await cpc.createOffer().then(async (offer)=>{

        await cpc.setLocalDescription(offer);
        const payload = {
            type:"consume",
            id:peers.keys.next().value,
            sdp:offer,
            consumerId:id
        }
        cpc.onicecandidate = event => {
            console.log("sending ice!!");

            if(event.candidate){
            ws.send(JSON.stringify({
                type:"consumer_ice",
                from:username,
                consumerId:id,
                to:selectedContact,
                ice:event.candidate
                }))
            }
        }

        cpc.onaddstream = function (evt) {
      
            remote_video.srcObject = evt.stream;
            console.log(evt.stream);
            console.log(evt.stream[0]);
        }
        ws.send(JSON.stringify(payload));
    })
}
// let pc = new RTCPeerConnection(configuration);



// var off;
// async function videoCall() {

//     if(selectedContact===""){
//         alert("Select a contact!!");
//         return;
//     }
//     await pc.createOffer().then(async (offer)=>{
//         off = offer;
//         await pc.setLocalDescription(offer);
//         await ws.send(JSON.stringify({
//         type:"offer",
//         from:username,
//         to:selectedContact,
//         offer:offer
//     }))
//     })
    
    
// }



// pc.onaddstream = function (evt) {
      
//       remote_video.srcObject = evt.stream;
//       console.log(evt.stream);
//       console.log(evt.stream[0]);
//     }




    var inputArea = document.getElementById("message-input");
var sendButton = document.getElementById("send-button");
sendButton.addEventListener("click",sendMessage);

var ws;
async function connectChat(){
  ws = new WebSocket(`wss://127.0.0.1:3030/chat?username=${username}`);
  ws.onerror = (error)=>console.error;
  ws.onopen = open;
  ws.onmessage = gotMessage;
}
function open(){
  console.log("Connection Established!!");
}
async function gotMessage(dat){
//   console.log(dat.data);
  const parsedData = JSON.parse(JSON.stringify(dat.toString("utf8")));
  //if sent data is a text message from the user then display the message.
  if(parsedData.type=='text'){
    var currentMessage = document.getElementById("message");
    var messageSender = document.createElement('div');
    messageSender.class = "message-sender";
    messageSender.innerHTML = parsedData.from;
    var message = document.createElement("div");
    message.class = "message";
    message.innerHTML = parsedData.message; 
    currentMessage.appendChild(messageSender);
    currentMessage.appendChild(message);
  }
  else if(parsedData.type =="welcome"){

    
    console.log("Connected to the server!");
    pc._uid = parsedData.id;
  }
  else if(parsedData.type ==="answer"){
    await pc.setRemoteDescription(new RTCSessionDescription(parsedData.sdp));
    console.log("Remote desc set!!");
  }
  else if(parsedData.type==="peers"){
    setPeers(parsedData.peers);
  }
  else if(parsedData.type==="consume"){

    await consumers.get(parsedData.id).setRemoteDescription(new RTCSessionDescription(parsedData.sdp));
    consumers.get(parsedData.id).remoteUser = parsedData.username;
  }
  else if(parsedData.type=="offer"){
    console.log("Offer received!!");
    await pc.setRemoteDescription(new RTCSessionDescription(parsedData.offer)).then(()=>{
        console.log("Remote desc set!!");
    });
    const answer = await pc.createAnswer();
    console.log("Answer created!!");
    await pc.setLocalDescription(answer).then(()=>{
        console.log("Local desc set!!");
    });
    ws.send(JSON.stringify({
          type:"answer",
          from:username,
          to:selectedContact,
          answer:answer
        }));
    

  }
  else if(parsedData.type=="answer"){
    console.log("Answer received!!");
    const remoteDesc = new RTCSessionDescription(parsedData.answer);
    await pc.setRemoteDescription(remoteDesc);
  }
  else if(parsedData.type=="candidate"){
    try {
        await pc.addIceCandidate(parsedData.candidate);
    } catch (e) {
        console.log(e);
    }
  }
  
}


async function sendMessage(){
    if(selectedContact===""){
        alert("Select a contact!!");
        return;
    }
  const data = {
    type:"text",
    message: inputArea.value,
    from:username,
    to:selectedContact
  }
  try{
    if(ws.readyState===3) await connectChat();
    ws.send(JSON.stringify(data));
    inputArea.value = "";
  }
  catch{
    console.log("Couldn't send message!!");
  }
}
</script>
</body>
<!-- <script src ="scripts/webSocket.js"></script> -->
</html>
